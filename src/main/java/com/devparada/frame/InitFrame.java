/*
 * This file is part of StatusMCServerTool.
 *
 * StatusMCServerTool is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * StatusMCServerTool is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with StatusMCServerTool. If not, see <https://www.gnu.org/licenses/>.
 */
package com.devparada.frame;

import com.devparada.logic.ImageServer;
import com.devparada.logic.StatusMCServer;
import com.devparada.persistency.DBManager;
import java.awt.GridBagConstraints;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author devparada
 */
public class InitFrame extends javax.swing.JFrame {

    /**
     * Saves the host and ip of dialog
     */
    private String HostIpDialog;
    /**
     * Database connection for use methods of DBManager class
     */
    private final DBManager database = new DBManager();

    /**
     * Creates new form InitFrame
     */
    public InitFrame() {
        initComponents();
    }

    public String getHostIpDialog() {
        return HostIpDialog;
    }

    public void setHostIpDialog(String HostIpDialog) {
        this.HostIpDialog = HostIpDialog;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDlgAdd = new javax.swing.JDialog();
        jLblAdd = new javax.swing.JTextField();
        jTxtAdd = new javax.swing.JTextField();
        jBtnAdd = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jPnlMain = new javax.swing.JPanel();
        jPanelIntro = new javax.swing.JPanel();
        jBtnIntroAdd = new javax.swing.JButton();
        jLblIntro = new javax.swing.JTextField();
        jBtnStatus = new javax.swing.JButton();
        jPnlInfo = new javax.swing.JPanel();

        jDlgAdd.setTitle("Add Server");
        jDlgAdd.setModal(true);
        jDlgAdd.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        jDlgAdd.setName("dialogAddServer"); // NOI18N

        jLblAdd.setEditable(false);
        jLblAdd.setBackground(new java.awt.Color(214, 217, 223));
        jLblAdd.setForeground(new java.awt.Color(0, 0, 0));
        jLblAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jLblAdd.setText("Intraduce the server IP (with port if different)");
        jLblAdd.setBorder(null);

        jTxtAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTxtAdd.setText("myserverminecraft.ddns.net:24321");

        jBtnAdd.setBackground(new java.awt.Color(0, 204, 51));
        jBtnAdd.setText("+ Add");
        jBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDlgAddLayout = new javax.swing.GroupLayout(jDlgAdd.getContentPane());
        jDlgAdd.getContentPane().setLayout(jDlgAddLayout);
        jDlgAddLayout.setHorizontalGroup(
            jDlgAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDlgAddLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDlgAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTxtAdd)
                    .addComponent(jLblAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDlgAddLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jBtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jDlgAddLayout.setVerticalGroup(
            jDlgAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDlgAddLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jLblAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jTxtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jBtnAdd)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jDlgAdd.pack();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StatusMCServerTool");
        setMinimumSize(new java.awt.Dimension(759, 403));
        setPreferredSize(new java.awt.Dimension(759, 403));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPnlMain.setLayout(new javax.swing.BoxLayout(jPnlMain, javax.swing.BoxLayout.Y_AXIS));

        jPanelIntro.setPreferredSize(new java.awt.Dimension(480, 168));

        jBtnIntroAdd.setBackground(new java.awt.Color(0, 204, 51));
        jBtnIntroAdd.setText("+");
        jBtnIntroAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIntroAddActionPerformed(evt);
            }
        });

        jLblIntro.setEditable(false);
        jLblIntro.setBackground(new java.awt.Color(214, 217, 223));
        jLblIntro.setForeground(new java.awt.Color(0, 0, 0));
        jLblIntro.setText("Click the + button to add more servers:");
        jLblIntro.setBorder(null);

        jBtnStatus.setText("StatusFrame");
        jBtnStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelIntroLayout = new javax.swing.GroupLayout(jPanelIntro);
        jPanelIntro.setLayout(jPanelIntroLayout);
        jPanelIntroLayout.setHorizontalGroup(
            jPanelIntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIntroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelIntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelIntroLayout.createSequentialGroup()
                        .addComponent(jLblIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jBtnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBtnIntroAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(129, 129, 129))
        );
        jPanelIntroLayout.setVerticalGroup(
            jPanelIntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelIntroLayout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(jPanelIntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jBtnIntroAdd)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPnlMain.add(jPanelIntro);

        jPnlInfo.setLayout(new java.awt.GridBagLayout());
        jPnlMain.add(jPnlInfo);

        jScrollPane.setViewportView(jPnlMain);

        getContentPane().add(jScrollPane);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnIntroAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIntroAddActionPerformed
        jDlgAdd.setVisible(true);
    }//GEN-LAST:event_jBtnIntroAddActionPerformed

    private void jBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddActionPerformed
        setHostIpDialog(jTxtAdd.getText());

        if (checkAddDialog()) {
            String[] ipServerArray = getHostIpDialog().split(":");
            int port = 25565;

            String serverIp = getHostIpDialog();
            jTxtAdd.setText("");

            if (ipServerArray.length == 2) {
                port = Integer.parseInt(ipServerArray[1]);
            } else {
                serverIp = getHostIpDialog() + ":" + port;
            }

            System.out.println("False");
            jDlgAdd.setVisible(false);
            database.addRow(serverIp);
            addPanel(ipServerArray[0], port);
        } else {
            System.out.println("True");
            jDlgAdd.setVisible(true);
        }
    }//GEN-LAST:event_jBtnAddActionPerformed

    private void jBtnStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnStatusActionPerformed
        StatusServerFrame frame = new StatusServerFrame();
        frame.setVisible(true);
    }//GEN-LAST:event_jBtnStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                InitFrame initFrame = new InitFrame();
                initFrame.setVisible(true);
                initFrame.start();
            }
        });
    }

    private void start() {
        if (!database.checkTable()) {
            database.createTable();
        }

        ArrayList<Object[]> dataServers = database.collectData();

        for (Object[] dataServer : dataServers) {
            for (Object data : dataServer) {
                String[] ipServer = data.toString().split(":");

                // Used SwingUtilities to prevent concurrence problems
                SwingUtilities.invokeLater(() -> {
                    addPanel(ipServer[0], Integer.parseInt(ipServer[1]));
                });
            }
        }
    }

    /**
     * Check the JTextField the dialog of dialog add server of the database
     *
     * @return Return true if checks are correct
     */
    private boolean checkAddDialog() {
        String JTxtText = getHostIpDialog();

        if (JTxtText.length() != 0) {
            String[] ipServerArray = JTxtText.split(":");

            // \\d+ -> only numbers 
            if (ipServerArray.length == 2 && !ipServerArray[1].matches("\\d+")) {
                JOptionPane.showMessageDialog(jDlgAdd, "Port not is number", "Error Add Server", JOptionPane.WARNING_MESSAGE);
            } else if (ipServerArray.length == 2 && ipServerArray[1].matches("\\d+")) {
                return true;
            } else {
                return true;
            }
        } else {
            JOptionPane.showMessageDialog(jDlgAdd, "IP Server not blank", "Error Add Server", JOptionPane.WARNING_MESSAGE);
        }
        return false;
    }

    /**
     * Add a panel with the server status with a given layout
     *
     * @param ipServer server ip
     * @param port server port
     */
    private void addPanel(String ipServer, int port) {
        StatusMCServer statusServer = new StatusMCServer(ipServer, port);
        String ipServerPort = ipServer + ":" + port;

        JPanel jPanelServer = new JPanel();
        JLabel jTxtIMG = new JLabel();
        JTextField jTxtHostIp = new JTextField(ipServerPort);
        JTextField jTxtOnline = new JTextField(statusServer.showDataSection(ipServerPort, "online"));
        JTextField jTxtVersion = new JTextField(statusServer.showDataSection(ipServerPort, "version"));
        JTextField jTxtPlayers = new JTextField(statusServer.showDataSection(ipServerPort, "players"));
        JButton jBtnEdit = new JButton("Edit");
        JButton jBtnDelete = new JButton("Delete");

        jPanelServer.setLayout(new java.awt.GridBagLayout());

        jTxtIMG.setBackground(new java.awt.Color(214, 217, 223));
        jTxtIMG.setForeground(new java.awt.Color(0, 0, 0));
        jTxtIMG.setHorizontalAlignment(JTextField.RIGHT);
        jTxtIMG.setBorder(null);
        jTxtIMG.setMinimumSize(new java.awt.Dimension(64, 64));
        jTxtIMG.setPreferredSize(new java.awt.Dimension(64, 64));

        ImageServer image = new ImageServer();
        BufferedImage imageServer = image.showImage(statusServer.showDataSection(ipServerPort, "icon"));
        if (image.checkImage(imageServer)) {
            // Create ImageIcon with base64 Image without "data:image/png;base64"
            ImageIcon imageIcon = new ImageIcon(imageServer);
            jTxtIMG.setIcon(imageIcon);
        }
        GridBagConstraints gridBagConstraintsIMG = new GridBagConstraints();
        gridBagConstraintsIMG.gridx = 0;
        gridBagConstraintsIMG.gridy = 0;
        gridBagConstraintsIMG.fill = GridBagConstraints.BOTH;
        gridBagConstraintsIMG.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jTxtIMG, gridBagConstraintsIMG);

        jTxtVersion.setEditable(false);
        jTxtVersion.setBackground(new java.awt.Color(214, 217, 223));
        jTxtVersion.setForeground(new java.awt.Color(0, 0, 0));
        jTxtVersion.setHorizontalAlignment(JTextField.CENTER);
        jTxtVersion.setBorder(null);
        jTxtVersion.setMinimumSize(new java.awt.Dimension(96, 64));
        jTxtVersion.setPreferredSize(new java.awt.Dimension(96, 64));
        GridBagConstraints gridBagConstraintsVersion = new GridBagConstraints();
        gridBagConstraintsVersion.gridx = 1;
        gridBagConstraintsVersion.gridy = 0;
        gridBagConstraintsVersion.gridwidth = 2;
        gridBagConstraintsVersion.fill = GridBagConstraints.BOTH;
        gridBagConstraintsVersion.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jTxtVersion, gridBagConstraintsVersion);

        jTxtHostIp.setEditable(false);
        jTxtHostIp.setBackground(new java.awt.Color(214, 217, 223));
        jTxtHostIp.setForeground(new java.awt.Color(0, 0, 0));
        jTxtHostIp.setHorizontalAlignment(JTextField.RIGHT);
        jTxtHostIp.setBorder(null);
        jTxtHostIp.setMinimumSize(new java.awt.Dimension(196, 64));
        jTxtHostIp.setPreferredSize(new java.awt.Dimension(196, 64));
        GridBagConstraints gridBagConstraintsHostIp = new GridBagConstraints();
        gridBagConstraintsHostIp.gridx = 0;
        gridBagConstraintsHostIp.gridy = 1;
        gridBagConstraintsHostIp.fill = GridBagConstraints.BOTH;
        gridBagConstraintsHostIp.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jTxtHostIp, gridBagConstraintsHostIp);

        jTxtOnline.setEditable(false);
        jTxtOnline.setBackground(new java.awt.Color(214, 217, 223));
        jTxtOnline.setForeground(new java.awt.Color(0, 0, 0));
        jTxtOnline.setHorizontalAlignment(JTextField.CENTER);
        jTxtOnline.setBorder(null);
        jTxtOnline.setMinimumSize(new java.awt.Dimension(96, 64));
        jTxtOnline.setPreferredSize(new java.awt.Dimension(96, 64));
        GridBagConstraints gridBagConstraintsOnline = new GridBagConstraints();
        gridBagConstraintsOnline.gridx = 1;
        gridBagConstraintsOnline.gridy = 1;
        gridBagConstraintsOnline.fill = GridBagConstraints.BOTH;
        gridBagConstraintsOnline.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jTxtOnline, gridBagConstraintsOnline);

        jTxtPlayers.setEditable(false);
        jTxtPlayers.setBackground(new java.awt.Color(214, 217, 223));
        jTxtPlayers.setForeground(new java.awt.Color(0, 0, 0));
        jTxtPlayers.setHorizontalAlignment(JTextField.CENTER);
        jTxtPlayers.setBorder(null);
        jTxtPlayers.setMinimumSize(new java.awt.Dimension(96, 64));
        jTxtPlayers.setPreferredSize(new java.awt.Dimension(96, 64));
        GridBagConstraints gridBagConstraintsPlayers = new GridBagConstraints();
        gridBagConstraintsPlayers.gridx = 2;
        gridBagConstraintsPlayers.gridy = 1;
        gridBagConstraintsPlayers.fill = GridBagConstraints.BOTH;
        gridBagConstraintsPlayers.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jTxtPlayers, gridBagConstraintsPlayers);

        GridBagConstraints gridBagConstraintsEdit = new GridBagConstraints();
        gridBagConstraintsEdit.gridx = 3;
        gridBagConstraintsEdit.gridy = 0;
        gridBagConstraintsEdit.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraintsEdit.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jBtnEdit, gridBagConstraintsEdit);

        jBtnDelete.addActionListener((java.awt.event.ActionEvent evt) -> {
            jBtnDeleteActionPerformed(ipServerPort);
        });
        GridBagConstraints gridBagConstraintsDelete = new GridBagConstraints();
        gridBagConstraintsDelete.gridx = 3;
        gridBagConstraintsDelete.gridy = 1;
        gridBagConstraintsDelete.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraintsDelete.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelServer.add(jBtnDelete, gridBagConstraintsDelete);

        jPnlMain.add(jPanelServer);
        jPnlMain.revalidate();
        jPnlMain.repaint();
    }

    private void jBtnDeleteActionPerformed(String ipString) {
        if (!database.deleteRow(ipString)) {
            System.out.println("Delete server");
            JOptionPane.showMessageDialog(null, "Non Server Found", "An error occurred", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAdd;
    private javax.swing.JButton jBtnIntroAdd;
    private javax.swing.JButton jBtnStatus;
    private javax.swing.JDialog jDlgAdd;
    private javax.swing.JTextField jLblAdd;
    private javax.swing.JTextField jLblIntro;
    private javax.swing.JPanel jPanelIntro;
    private javax.swing.JPanel jPnlInfo;
    private javax.swing.JPanel jPnlMain;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTextField jTxtAdd;
    // End of variables declaration//GEN-END:variables
}
